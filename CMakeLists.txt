cmake_minimum_required(VERSION 3.8)
project(computer_vision)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(image_transport REQUIRED)
find_package(cv_bridge REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(std_msgs REQUIRED)
find_package(OpenCV REQUIRED)
find_package(PCL 1.8 REQUIRED)
find_package(pcl_conversions REQUIRED)
find_package(tf2_geometry_msgs REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(image_geometry REQUIRED)



include_directories(${OpenCV_INCLUDE_DIRS})
link_directories(${OpenCV_LIBRARY_DIRS})
add_definitions(${OpenCV_DEFINITIONS})

include_directories(${PCL_INCLUDE_DIRS})
link_directories(${PCL_LIBRARY_DIRS})
add_definitions(${PCL_DEFINITIONS})

#######

# OpenCV node
add_executable(trace_bar_node src/trace_bar_node.cpp)
target_include_directories(trace_bar_node PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
target_compile_features(trace_bar_node PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17
ament_target_dependencies(
  trace_bar_node
  "rclcpp"
  "image_transport"
  "cv_bridge"
  "sensor_msgs"
  "std_msgs"
  "OpenCV"
  "PCL"
)

target_link_libraries(trace_bar_node ${PCL_LIBRARIES})

install(TARGETS trace_bar_node
  DESTINATION lib/${PROJECT_NAME})


# PCL_p6 node
add_executable(cv_pcl_node src/cv_pcl_node.cpp)
target_include_directories(cv_pcl_node PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
target_compile_features(cv_pcl_node PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17
ament_target_dependencies(
  cv_pcl_node
  "rclcpp"
  "image_transport"
  "image_geometry"
  "cv_bridge"
  "sensor_msgs"
  "std_msgs"
  "geometry_msgs"
  "OpenCV"
  "PCL"
  "pcl_conversions"
  "tf2_geometry_msgs"
  "tf2_ros"
  "geometry_msgs"
)

target_link_libraries(cv_pcl_node ${PCL_LIBRARIES})

install(TARGETS cv_pcl_node
  DESTINATION lib/${PROJECT_NAME})

  
#install(DIRECTORY launch config params maps
#        DESTINATION share/${PROJECT_NAME})

#######

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # uncomment the line when a copyright and license is not present in all source files
  #set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # uncomment the line when this package is not in a git repo
  #set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()


ament_package()
